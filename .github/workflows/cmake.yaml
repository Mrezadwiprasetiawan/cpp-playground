name: CMake Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest   # native Linux
            target: native
          - os: windows-latest  # native Windows
            target: native
          - os: ubuntu-latest   # cross Android
            target: android

    steps:
    # ───────── checkout ─────────
    - uses: actions/checkout@v4

    # ───────── Vulkan SDK (all targets) ─────────
    - name: Install Vulkan SDK
      uses: jakoch/install-vulkan-sdk-action@v1
      with:
        vulkan_version: 1.3.280.0
        cache: true
        install_lavapipe: true

    # ───────── Export Vulkan env (Linux runner) ─────────
    - name: Export Vulkan env (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "VULKAN_SDK=$VULKAN_SDK" >> "$GITHUB_ENV"
        echo "PATH=$VULKAN_SDK/bin:$PATH" >> "$GITHUB_ENV"
        echo "LD_LIBRARY_PATH=$VULKAN_SDK/lib:${LD_LIBRARY_PATH}" >> "$GITHUB_ENV"

    # ───────── Export Vulkan env (Windows runner) ─────────
    - name: Export Vulkan env (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        "VULKAN_SDK=$Env:VULKAN_SDK"       | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        "PATH=$Env:VULKAN_SDK\Bin;$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        "LIB=$Env:VULKAN_SDK\Lib;$Env:LIB"   | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    # ───────── Host‑specific deps ─────────
    - name: Setup deps (Linux native & Android)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang ninja-build libomp-dev \
        libpng-dev libx11-dev libvulkan-dev     # ← tambahkan ini

    - name: Deps (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install llvm ninja cmake -y

    # ───────── Android NDK ─────────
    - name: Set up Android NDK
      if: matrix.target == 'android'
      uses: android-actions/setup-android@v3
      with:
        ndk-version: "26.2.11394342"
        components: platform-tools

    # ───────── build‑dir cache ─────────
    - uses: actions/cache@v4
      with:
        path: build
        key: build-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.h') }}
        restore-keys: |
          build-${{ runner.os }}-${{ matrix.target }}-

    # ───────── Configure (Linux native) ─────────
    - name: Configure (Linux native)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'native'
      run: |
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_PREFIX_PATH="$VULKAN_SDK" \
          -DVULKAN_SDK="$VULKAN_SDK"

    # ───────── Configure (Windows native) ─────────
    - name: Configure (Windows native)
      if: matrix.os == 'windows-latest' && matrix.target == 'native'
      shell: pwsh
      run: |
        cmake -S . -B build -G Ninja `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_C_COMPILER="clang.exe" `
          -DCMAKE_CXX_COMPILER="clang++.exe" `
          -DCMAKE_PREFIX_PATH="$Env:VULKAN_SDK" `
          -DVULKAN_SDK="$Env:VULKAN_SDK"

    # ───────── Configure (Android) ─────────
    - name: Configure (Android arm64‑v8a)
      if: matrix.target == 'android'
      env:
        ANDROID_NDK: ${{ env.ANDROID_NDK_HOME }}
      run: |
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK/build/cmake/android.toolchain.cmake" \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-24 \
          -DVULKAN_SDK="$VULKAN_SDK"

    # ───────── Build ─────────
    - name: Build
      run: cmake --build build --config Release

    # ───────── Tests (native) ─────────
    - name: ctest (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'native'
      working-directory: build
      run: ctest --output-on-failure

    - name: ctest (Windows)
      if: matrix.os == 'windows-latest' && matrix.target == 'native'
      working-directory: build
      run: ctest -C Release --output-on-failure

    - name: Skip tests (Android)
      if: matrix.target == 'android'
      run: echo "Skipping tests for Android target"
